{"version":3,"sources":["components/TodoTemplate.js","components/TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","produce","draft","push","todo","find","todos","splice","findIndex","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","filter","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","CheckCircle","props","css","Text","Remove","TodoItemBlock","TodoItem","onClick","React","memo","TodoListBlock","TodoList","map","Fragment","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c02efd18.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n  margin: 0 auto; //중앙정렬\r\n\r\n  position: relative; //박스 하단을 위한 설정\r\n  background:  #fff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n  \r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TodoTemplate = ({children}) => {\r\n  return (\r\n    <TodoTemplateBlock>\r\n      {children}\r\n    </TodoTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","import React, { createContext, useContext, useReducer, useRef } from 'react';\r\nimport produce from \"immer\";\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: 'css를 사용하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Scss를 사용하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'StyleComponents를 사용하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Emotion를 사용하기',\r\n    done: false\r\n  },\r\n];\r\n\r\nconst todoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CREATE':\r\n      return produce(state, draft => {\r\n        draft.push(action.todo)\r\n      });\r\n    case 'TOGGLE':\r\n      return produce(state, draft => {\r\n        const todo = draft.find(todos => todos.id === action.id);\r\n        todo.done = !todo.done\r\n      });\r\n    case 'REMOVE':\r\n      return produce(state, draft => {\r\n        draft.splice(draft.findIndex(todo => todo.id === action.id),1)\r\n      });\r\n    default:\r\n      throw new Error(`Unhandled action ${action.type}`);\r\n  }\r\n}\r\n\r\n//state전용 Context\r\nconst TodoStateContext = createContext();\r\n//Dispatch전용 Context\r\nconst TodoDispatchContext = createContext();\r\n//nextId Context\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport const TodoProvider = ({children}) => {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(5); //렌더링 되지 않는값\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  )\r\n}\r\n\r\n//Custom Hooks State\r\nexport const useTodoState = () => {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n//Custom Hooks Dispatch\r\nexport const useTodoDispatch = () => {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n//Custom Hooks Dispatch\r\nexport const useTodoNextId = () => {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport { useTodoState } from \"./TodoContext\";\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding: 48px 32px 24px 32px;\r\n  border: 1px solid #e9ecef;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n\r\n  .tasks-left {\r\n    color: #5c7cfa;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    margin-top: 40px;\r\n  }\r\n`;\r\n\r\nconst TodoHead = () => {\r\n\r\n  const todos = useTodoState();\r\n  const undoneTasks = todos.filter(todo => !todo.done)\r\n\r\n  //날짜 계산\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n  const dayName = today.toLocaleDateString('ko-KR', {\r\n    weekday: 'long'\r\n  });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className='day'>{dayName}</div>\r\n      <div className='tasks-left'>할 일 {undoneTasks.length}개 남음</div>\r\n    </TodoHeadBlock>\r\n  );\r\n};\r\n\r\nexport default TodoHead;\r\n","import React from 'react';\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdDelete, MdDone } from \"react-icons/all\";\r\nimport { useTodoDispatch } from \"./TodoContext\";\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  border: 1px solid #bac8ff;\r\n  font-size: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${props => props.done && css`\r\n    border: 1px solid #5c7cfa;\r\n    color: #5c7cfa;\r\n  `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${props => props.done && css`\r\n    color: #ced4da;\r\n  `}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n  opacity: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 12px 0;\r\n\r\n  &:hover {\r\n    ${Remove} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst TodoItem = ({id, done, text}) => {\r\n\r\n  const dispatch = useTodoDispatch();\r\n  const onToggle = () => {\r\n    dispatch({\r\n      type: 'TOGGLE',\r\n      id\r\n    });\r\n  };\r\n  const onRemove = () => {\r\n    dispatch({\r\n      type: 'REMOVE',\r\n      id\r\n    });\r\n  };\r\n\r\n  return (\r\n      <TodoItemBlock>\r\n        <CheckCircle done={done} onClick={onToggle}>{done && <MdDone/>}</CheckCircle>\r\n        <Text done={done}>{text}</Text>\r\n        <Remove onClick={onRemove}><MdDelete/></Remove>\r\n      </TodoItemBlock>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoItem);\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { useTodoState } from \"./TodoContext\";\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto; //scroll\r\n`;\r\n\r\nconst TodoList = () => {\r\n  const todos = useTodoState();\r\n  return (\r\n    <TodoListBlock>\r\n      {todos.map(todo =>\r\n        <React.Fragment key={todo.id}>\r\n          <TodoItem\r\n            id={todo.id}\r\n            text={todo.text}\r\n            done={todo.done}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n    </TodoListBlock>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdAdd } from \"react-icons/all\";\r\nimport { useTodoDispatch, useTodoNextId } from \"./TodoContext\";\r\n\r\nconst CircleButton = styled.button`\r\n  border: none;\r\n  outline: none;\r\n  background: #5c7cfa;\r\n\r\n  &:hover {\r\n    background: #91a7ff;\r\n  }\r\n\r\n  &:active {\r\n    background: #3b5bdb;\r\n  }\r\n\r\n  z-index: 1;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0;\r\n  transform: translate(-50%, 50%);\r\n\r\n  font-size: 60px;\r\n  color: #fff;\r\n  border-radius: 50%;\r\n\r\n  transition: 300ms all ease-in;\r\n  ${props => props.open && css`\r\n    background: #ff6b6b;\r\n\r\n    &:hover {\r\n      background: #ff8787;\r\n    }\r\n\r\n    &:active {\r\n      background: #fa5252;\r\n    }\r\n\r\n    transform: translate(-50%, 50%) rotate(45deg);\r\n  `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding: 32px 32px 72px 32px;\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst TodoCreate = () => {\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState('');\r\n\r\n  //useTodo 불러오기\r\n  const dispatch = useTodoDispatch();\r\n  const nextId = useTodoNextId();\r\n\r\n  const onChange = e => setValue(e.target.value);\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: 'CREATE',\r\n      todo: {\r\n        id: nextId.current,\r\n        text: value,\r\n        done: false\r\n      }\r\n    });\r\n    setValue('');\r\n    setOpen(false);\r\n    nextId.current += 1;\r\n  };\r\n\r\n  const onToggle = () => setOpen(!open);\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input placeholder='할 일을 입력 후, Enter를 눌러주세요.'\r\n                   autoFocus\r\n                   onChange={onChange}\r\n                   value={value}\r\n            />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd/>\r\n      </CircleButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoCreate);\r\n","import React from 'react';\nimport { createGlobalStyle } from \"styled-components\";\nimport TodoTemplate from \"./components/TodoTemplate\";\nimport TodoHead from \"./components/TodoHead\";\nimport TodoList from \"./components/TodoList\";\nimport TodoCreate from \"./components/TodoCreate\";\nimport { TodoProvider } from \"./components/TodoContext\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nconst App = () => {\n  return (\n    <>\n      <TodoProvider>\n        <GlobalStyle/>\n        <TodoTemplate>\n          <TodoHead/>\n          <TodoList/>\n          <TodoCreate/>\n        </TodoTemplate>\n      </TodoProvider>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}